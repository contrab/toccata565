#include "pitches.h"

/**
 * Globals
 */
  const int lled = 13;

// notes in the melody:
int melody[] = {
  NOTE_A5, NOTE_G5, NOTE_A5, 0, NOTE_G5, NOTE_F5, NOTE_E5, NOTE_D5, NOTE_CS5, NOTE_D5, 0,
  NOTE_A4, NOTE_G4, NOTE_A4, 0, NOTE_E4, NOTE_F4, NOTE_CS4, NOTE_D4, 0,
  NOTE_A3, NOTE_G3, NOTE_A3, 0, NOTE_G3, NOTE_F3, NOTE_E3, NOTE_D3, NOTE_CS3, NOTE_D3, 0,
  NOTE_D2, NOTE_D1, NOTE_D2, NOTE_D3, NOTE_D4, NOTE_D5, NOTE_D6, NOTE_D7, NOTE_D8
};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {
  4, 4, 4, 4, 12, 12, 12, 12, 4, 4, 2,
  4, 4, 4, 4, 4, 4, 4, 4, 2,
  4, 4, 4, 4, 12, 12, 12, 12, 4, 4, 2,
  4, 2, 2, 2, 2, 2, 2, 2, 2
};

class Blinkenlights
{
  int ledPin;
  long onTime;
  long offTime;

  // State:
  int ledState;
  unsigned long prevMillis;

  public:

  /**
   * Class Constructor.
   * pin: Which pin to operate on
   * on: How long to keep the LED on, in milliseconds
   * off: How long to keep the LED off, in milliseconds
   */
  Blinkenlights(int pin, long on, long off)
  {
    ledPin = pin;
    pinMode(ledPin, OUTPUT);

    onTime = on;
    offTime = off;

    ledState = LOW;
    prevMillis = 0;
  }

  /**
   * Updates the pin's state when called.
   */
  void Update()
  {
    unsigned long currMillis = millis();

    if ((ledState == HIGH) && ((currMillis - prevMillis) >= onTime))
    {
      ledState = LOW;
      prevMillis = currMillis;
      digitalWrite(ledPin, ledState);
    }
    else if ((ledState == LOW) && ((currMillis - prevMillis) >= offTime))
    {
      ledState = HIGH;
      prevMillis = currMillis;
      digitalWrite(ledPin, ledState);    
    }
  }
};


/**
 * Play the opening statements of Bach Bwv565 Toccata in d minor.
 */
class Bwv565
{
  int pin;

  // State:
  bool quiet;
  int note;
  int prevMillis;
  int currDuration;

  /**
   * Class Constructor.
   * pin: Which pin has the speaker attached.
   */
  public:
  Bwv565(int speakerPin) {
    pin = speakerPin;
    note=0;
    prevMillis = 0;
    currDuration = 0;
    quiet = true;
  }

  void Play() {
    quiet = false;
    prevMillis = millis();
  }

  void Stop() {
    noTone(pin);
    quiet = true;
  }

  void FromTheTop() {
    note = 0;
    prevMillis = 0;
    currDuration = 0;
  }

  void Update() {
    if (quiet) {
      noTone(pin);
      return;
    }

    int currMilis = millis();
    
  }

};

Blinkenlights bored(lled, 50, 450);
Bwv565 bwv565(8);

void bwv(){
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < 40; thisNote++) {

    // to calculate the note duration, take one second
    // divided by the note type.
    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(8, melody[thisNote], noteDuration);

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:
    int pauseBetweenNotes = noteDuration;// * 1.30;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    noTone(8);
  }
}

/**
 * Run Once.
 */
void setup() {
  bwv();
}

/**
 * Main Loop
 */
void loop() {
  bored.Update();
}

